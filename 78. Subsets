Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]

Time complexity : O(2^N)
Space complexity : O(N)

class Solution {
public:
     vector<vector<int>> findSubset( vector<vector<int>>&result,vector<int>&temp,int ind,
     vector<int>&nums)
     {
        //base case
         if(ind>=nums.size())
         {
            result.push_back(temp);
            return result;
         }

        //  temp.push_back(nums[ind]);
        //  findSubset(result,temp,ind+1,nums);
        //  temp.pop_back();
        //  findSubset(result,temp,ind+1,nums);

        findSubset(result,temp,ind+1,nums);
        temp.push_back(nums[ind]);
        findSubset(result,temp,ind+1,nums);
        temp.pop_back();

         return result;
     }

    vector<vector<int>> subsets(vector<int>& nums)
     {
          vector<vector<int>> result;
          vector<int> temp;

         return findSubset(result,temp,0,nums);

    }
};
