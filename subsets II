Practice link 
   https://leetcode.com/problems/subsets-ii/description/
   
Time complexity:

2^N x N
2^N is for generating subsets in the worstcase
N is for pushing the every approx of N length to the result so

Space complexity:
O(2^N x K)
2^N for subsets are going to be in
K is the average length of the subsets

Auxillary Space Complexity
 O(2^N) is the func call that would be made

class Solution {
     private :
     void findSubsets(vector<vector<int>>&res,vector<int>&ds,vector<int>&nums,int ind)
     {
         res.push_back(ds);  // why here base case is not becoz we are going for n-1 times in the loop itself so that 
         for(int i=ind;i<nums.size();i++)
         {  //if we are in the next option(right side call do you get it? :) ) 
                 we need to look back is any duplicates are found not 
             if(i!=ind && nums[i]==nums[i-1])  continue;
             ds.push_back(nums[i]);
             findSubsets(res,ds,nums,i+1);
             ds.pop_back();
         }
     }
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> ds;
        sort(nums.begin(),nums.end());
        findSubsets(res,ds,nums,0);
        // sort(res.begin(),res.end());
        return res;
    }
};
