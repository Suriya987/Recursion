Practice link
   https://leetcode.com/problems/combination-sum/solutions/3836005/recursive-soln/

problem description
    we need to find the combinations which is going to gives the sum == given target.
  example   arr= 1 , 2 , 3   target = 3
      result   (1,1,1)   (1,2)  (3)   this is our combinations

Intuition
   we need to use the same index until our base case would occurs 
if the base case is met we need to give a condition if our current combination sum is equals to  targe we push the 
    current combiantion into our result vector

Time complexiy 

      O(2^t * k)   where t is the target, k is the average length
Reason: Assume if you were not allowed to pick a single element multiple times, 
  every element will have a couple of options: pick or not pick which is 2^n different recursion calls, 
  also assuming that the average length of every combination generated is k.
  (to put length k data structure into another data structure)

Why not (2^n) but (2^t) (where n is the size of an array)?
   Assume that there is 1 and the target you want to reach is 10 so 10 times you can “pick or not pick” an element.

  Space Complexity
      Space Complexity: O(k*x), k is the average length and x is the no. of combinations
  
    
class Solution {
    private:
     void findCombination(vector<int> &arr,vector<int> &temp,vector<vector<int>>&res,int sum,int target,int ind)
{
    //base case 
   if(ind>=arr.size() || sum>=target){
     if(sum==target) res.push_back(temp);
     return;
   }
   temp.push_back(arr[ind]);
   sum+=arr[ind];
   findCombination(arr,temp,res,sum,target,ind);
   sum=sum-arr[ind];
   temp.pop_back();
   findCombination(arr,temp,res,sum,target,ind+1);
   
}
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
       vector<vector<int>> res;
    vector<int> temp;
     findCombination(candidates,temp,res,0,target,0);
    return res;    

}
};

//We can able to make small adjustments to our code 

from 38 line to 43 line
    in this we are going to pick only the elements which we are needed other wise go for next index 
  Ass simple as that right..
  
  // pick up the element 
      if (arr[ind] <= target) {
        ds.push_back(arr[ind]);
        findCombination(ind, target - arr[ind], arr, ans, ds);
        ds.pop_back();
      }

      findCombination(ind + 1, target, arr, ans, ds);

